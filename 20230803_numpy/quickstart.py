"""
## Python列表和NumPy数组之间有什么区别？

NumPy为您提供了大量快速高效的创建数组和操作其中的数值数据的方法。虽然Python列表中可以
包含一个列表中的不同数据类型，但NumPy数组中的所有元素都应该是同类的。如果数组不是同类的，
那么针对数组的数学运算会非常低效。

## 为什么使用NumPy？

NumPy数组比Python列表更快、更小巧。数组占用的内存更少，使用起来更方便。NumPy使用更少的内存
来存储数据，并且提供了指定数据类型的机制。这使得代码可以进一步优化。

## 数组是什么？

数组是NumPy库的中心数据结构。数组是一个值的网格，它包含关于原始数据的信息、如何定位一个元素以
及如何解释一个元素。它有一个可以通过各种方式索引的元素网格。所有的元素都是相同的类型，被称为数
组的dtype。

数组可以由一组非负整数、布尔值、另一个数组或整数进行索引。数组的秩是其维度的数量。数组的形状是
一个整数的元组，给出了数组在每个维度上的大小。

我们可以使用Python列表来初始化NumPy数组，对于二维或更高维度的数据，使用嵌套列表。
"""

import numpy as np

a = np.array([1, 2, 3, 4, 5, 6])
a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(a[0])  # [1 2 3 4]

"""
关于数组的更多信息

本节涵盖1D数组、2D数组、ndarray、向量、矩阵

你可能偶尔会听到数组被称为“ndarray”，这是“N维数组”的缩写。N维数组简单地说就是具有任
意数量维度的数组。你也可能听到1-D，或者一维数组，2-D，或者二维数组，等等。NumPy的ndarray
类用于表示矩阵和向量。向量是具有单一维度的数组（行向量和列向量之间没有区别），而矩阵是指具
有两个维度的数组。对于3-D或更高维度的数组，张量这个术语也常用。

数组的属性是什么？

数组通常是相同类型和大小的固定大小容器。数组的维度和项数由其形状定义。数组的形状是一个非负整
数的元组，指定每个维度的大小。

在NumPy中，维度被称为轴。这意味着如果你有一个这样的2D数组：

[[0., 0., 0.],
[1., 1., 1.]]
你的数组有2个轴。第一个轴的长度为2，第二个轴的长度为3。

就像在其他Python容器对象中一样，可以通过索引或切片数组来访问和修改数组的内容。与典型的容器对象
不同，不同的数组可以共享相同的数据，因此在一个数组上所做的更改可能在另一个数组中可见。

数组属性反映了数组本身固有的信息。如果你需要获取或甚至设置数组的属性而不创建新数组，你通常可以通
过其属性访问数组。
"""


"""
创建基本数组
"""

a = np.array([1, 2, 3])
z = np.zeros(2)  # [0. 0.]
o = np.ones(2)  # [1. 1.]
e = np.empty(2)  # [0. 0.]
np.arange(4)  # [0 1 2 3]
np.arange(2, 9, 2)  # [2, 4, 6, 8]
np.linspace(0, 10, num=5)  # [ 0. ,  2.5,  5. ,  7.5, 10. ]
np.ones(2, dtype=np.int64)  # [1, 1]

"""
添加、删除和排序元素
"""
arr = np.array([2, 1, 5, 3, 7, 4, 6, 8])
np.sort(arr)  # [1 2 3 4 5 6 7 8]

a = np.array([1, 2, 3, 4])
b = np.array([5, 6, 7, 8])
np.concatenate((a, b))  # array([1, 2, 3, 4, 5, 6, 7, 8])

x = np.array([[1, 2], [3, 4]])
y = np.array([[5, 6]])
np.concatenate((x, y), axis=0)
"""
array([[1, 2],
       [3, 4],
       [5, 6]])
"""

"""
你如何知道数组的形状和大小？
"""

array_example = np.array([[[0, 1, 2, 3],
                           [4, 5, 6, 7]],

                          [[0, 1, 2, 3],
                           [4, 5, 6, 7]],

                          [[0, 1, 2, 3],
                           [4, 5, 6, 7]]])
print("数组的维数：", array_example.ndim)
print("总数量：", array_example.size)
print("形状：", array_example.shape)


"""
你能重塑一个数组吗？
"""
a = np.arange(6)
b = a.reshape(3, 2)
"""
[[0 1]
 [2 3]
 [4 5]]
"""

"""
索引和切片
"""
data = np.array([1, 2, 3])
data[1] # 2
data[0:2] # array([1, 2])

a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(a[a < 5]) # [1 2 3 4]

five_up = (a >= 5) # [ 5  6  7  8  9 10 11 12]

"""
基本数组操作
本节涵盖加法、减法、乘法、除法等
"""

data = np.array([1, 2])
ones = np.ones(2, dtype=int)
print(data + ones) # [2 3]
print(data - ones) # [0 1]
print(data * data) # [1 4]
print(data / data) # [1. 1.]

a = np.array([1, 2, 3, 4])
print(a.sum())


b = np.array([[1, 1], [2, 2]])
"""
您可以使用以下方法对行轴求和
"""
print(b.sum(axis=0)) # [3 3]
"""
您可以使用以下方法对列轴求和
"""
print(b.sum(axis=1)) # [2 4]

"""
广播

有时，你可能想要在一个数组和一个单一数字之间（也称为向量和标量之间的操作）或在两
个不同大小的数组之间执行操作。例如，你的数组（我们称之为“数据”）可能包含关于距离
的英里信息，但你想将信息转换为公里。你可以使用以下操作来执行此操作
"""

# 创建矩阵
data = np.array([[1, 2], [3, 4], [5, 6]])
print(data[0, 1]) # 2

"""
保存和加载 NumPy 对象
"""
a = np.array([1, 2, 3, 4, 5, 6])
np.save('filename', a)
b = np.load('filename.npy')
print(b)
